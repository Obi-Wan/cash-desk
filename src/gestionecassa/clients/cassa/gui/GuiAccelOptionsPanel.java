/*
 * GuiAccelOptionsPanel.java
 * 
 * Copyright (C) 2009 Nicola Roberto Vigan√≤
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GuiAccelOptionsPanel.java
 *
 * Created on 4-set-2009, 18.46.14
 */

package gestionecassa.clients.cassa.gui;

import gestionecassa.clients.gui.VisualListsMngr;
import gestionecassa.clients.gui.OkCancelPanel;
import gestionecassa.clients.gui.RecordPanels;

/**
 *
 * @author ben
 */
public class GuiAccelOptionsPanel extends OkCancelPanel {

    /**
     *
     */
    GuiOrderSingleArticleWOptionsPanel targetPanel;

    /**
     * 
     */
    VisualListsMngr<GuiAccelSingleOptionPanel, OptionPanelRelation> varListMng;

    /**
     * Creates new form GuiAccelOptionsPanel
     *
     * @param targetPanel
     */
    public GuiAccelOptionsPanel(
            GuiOrderSingleArticleWOptionsPanel targetPanel) {
        initComponents();

        this.targetPanel = targetPanel;

        varListMng = new VisualListsMngr<GuiAccelSingleOptionPanel,
                OptionPanelRelation>(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

    /**
     * Inner class that defines a record of the table of options.
     *
     * @author ben
     */
    public class OptionPanelRelation {

        public String option;

        /**
         * Reference to the original panel showing up in the gui,
         * rapresenting this option; if any.
         */
        public GuiOrderSingleOptionPanel origPanel;

        /**
         * Explicit constructor
         *
         * @param origPanel
         * @param opt
         */
        private OptionPanelRelation(GuiOrderSingleOptionPanel origPanel, String opt) {
            this.origPanel = origPanel;
            this.option = opt;
        }
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables


    /**
     * Initializes the panel
     */
    @Override
    public void init() {
        int i = 0;
        for (String option : targetPanel.article.getOptions()) {
            GuiAccelSingleOptionPanel tempDiagPanel;
            GuiOrderSingleOptionPanel tempOrigPanel =
                    targetPanel.getSingleOptionPanel(option);

            tempDiagPanel = new GuiAccelSingleOptionPanel(option,
                    (tempOrigPanel == null) ? 0 : tempOrigPanel.getNumTot(),
                    i++);

            varListMng.addRecord(tempDiagPanel,
                                new OptionPanelRelation(tempOrigPanel, option));
        }

        varListMng.buildVisualList();
    }

    /**
     * Applies modifications to the original panel.
     */
    @Override
    public void apply() {
        for (RecordPanels<GuiAccelSingleOptionPanel, OptionPanelRelation>
                record : varListMng.getRecords()) {

            if (record.displayedPanel.spinnerModel.getValue().equals(
                    record.displayedPanel.spinnerModel.getMinimum())) {
                if (record.data.origPanel != null) {
                    targetPanel.removeOptionPanel(record.data.origPanel);
                }
            } else {
                if (record.data.origPanel == null) {
                    targetPanel.addNewOptionPanel(record.data.option,
                            record.displayedPanel.getNumTot());
                } else {
                    record.data.origPanel.setNumTot(
                            record.displayedPanel.spinnerModel.getNumber().intValue());
                }
            }
        }
        targetPanel.updateAfterModify();
    }
}
