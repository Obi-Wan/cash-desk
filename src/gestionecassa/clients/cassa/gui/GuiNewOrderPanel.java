/*
 * GuiNewOrderPanel.java
 * 
 * Copyright (C) 2009 Nicola Roberto Viganò
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GuiNewOrderPanel.java
 *
 * Created on 12-mag-2009, 22.16.39
 */

package gestionecassa.clients.cassa.gui;

import gestionecassa.clients.cassa.*;
import gestionecassa.ArticleWithOptions;
import gestionecassa.Article;
import gestionecassa.ArticlesList;
import gestionecassa.order.Order;
import gestionecassa.order.EntrySingleArticle;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;

/**
 *
 * @author ben
 */
public class GuiNewOrderPanel extends GuiVariableListPanel {

    /**
     * Reference alla classe della business logic
     */
    CassaAPI owner;

    GuiAppFrameCassa parent;

    /**
     * Local Reference to the articles list.
     */
    ArticlesList articlesList;

    /** 
     * Creates new form GuiNewOrderPanel
     *
     * @param owner
     */
    public GuiNewOrderPanel(CassaAPI owner, GuiAppFrameCassa parent) {
        initComponents();
        this.owner = owner;
        this.parent = parent;

        initKeysShortcuts();
        fetchArticlesList();
        buildContentsList();
        buildVisualList(this);

        this.setPreferredSize(new Dimension(800, 450));

        this.getInputMap(WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "ENTER");
        this.getActionMap().put("ENTER", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                confirmAndSendNewOrder();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setMinimumSize(new java.awt.Dimension(150, 150));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 559, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 443, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables


    /**
     * Popolates the list of the panels related to each article sold.
     */
    protected void buildContentsList() {
        panelsTable = new Vector<RecordPanels>();//<RecordPanelsOfArticles>();
        int i = 0;
        for (Article bene : articlesList.getList()) {
            GuiAbstrSingleArticlePanel tempPanel;
            if (bene instanceof ArticleWithOptions) {
                tempPanel = 
                        new GuiOrderSingleArticleWOptionsPanel(this,
                                                    (ArticleWithOptions)bene,i);
            } else {
                tempPanel = new GuiOrderSingleArticlePanel(this,bene,i);
            }
            panelsTable.add(new RecordPanelsOfArticles(bene, tempPanel));
            i++;
        }
    }

    @Override
    void cleanDataFields() {
        super.cleanDataFields();
        parent.updateCurrentOrder(0);
    }

    /**
     * Gets the ArticleList and stores it locally.
     */
    private void fetchArticlesList() {
        articlesList = owner.getArticlesList();
    }

    /**
     * it fetches the ArticleList from the server (through the CassaAPI)
     * and makes the client store it locally
     */
    void forceRMIRequestArticlesList() {
        try {
            owner.getRMIArticlesList();
        } catch (RemoteException ex) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Il server non ha risposto alla richiesta della lista",
                "Errore di comunicazione",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * If the new order is not empty, it sends it to the server and cleans the
     * gui, ready for compiling a new order.
     */
    void confirmAndSendNewOrder() {
        try {
            Order nuovoOrdine = createNewOrder();
            if (nuovoOrdine.getTotalPrice() != 0) {
                owner.sendRMINewOrder(nuovoOrdine);
                parent.updateNewOrder(computeOrderPrice(nuovoOrdine));
                this.cleanDataFields();
            }
        } catch (RemoteException ex) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Il server non ha risposto alla richiesta dell'invio del " +
                "nuovo ordine",
                "Errore di comunicazione",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Il server ha avuto problemi col DB",
                "Errore del Backend sul server",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    void updateList() {
        forceRMIRequestArticlesList();
        fetchArticlesList();
        buildContentsList();
        buildVisualList(this);
    }

    /**
     * Inner class that defines a record of the table of goods.
     *
     * @author ben
     */
    protected class RecordPanelsOfArticles extends RecordPanels {

        /**
         *
         */
        final Article article;

        /**
         * Explicit constructor
         *
         * @param article
         * @param panel
         */
        public RecordPanelsOfArticles(Article art,
                                      GuiAbstrSingleArticlePanel pan) {
            super(pan);
            this.article = art;
        }
    }

    /**
     * Creates a new order from the chosen Articles
     *
     * @return the created order
     * 
     * @throws RemoteException
     */
    private Order createNewOrder() throws RemoteException {
        int tempNumTot = 0;
        Order tempOrd = new Order(owner.getUsername(), owner.getHostname());

        for (RecordPanels tempRecord : panelsTable) {
            RecordPanelsOfArticles singleRecord =
                    (RecordPanelsOfArticles) tempRecord;

            tempNumTot = singleRecord.displayedPanel.getNumTot();

            if (singleRecord.displayedPanel.getNumTot() != 0) {

                if (singleRecord.article.hasOptions()) {

                    int progressive = owner.getNProgressivo(
                            singleRecord.article.getName(), tempNumTot);
                    tempOrd.addArticleWithOptions(
                            (ArticleWithOptions)singleRecord.article,
                            tempNumTot, progressive,
                            ((GuiOrderSingleArticleWOptionsPanel)
                                (singleRecord.displayedPanel)).getPatialsList());
                } else {
                    tempOrd.addArticle(singleRecord.article,tempNumTot);
                }
            }
        }
        tempOrd.setTotalPrice(computeOrderPrice(tempOrd));
        return tempOrd;
    }

    /**
     * It calculates the amount the "still to be committed" order will cost
     *
     * @return
     */
    private double computeCurrentOrder() {
        double output = 0;
        for (RecordPanels tempRecord : panelsTable) {
            RecordPanelsOfArticles singleRecord =
                    (RecordPanelsOfArticles) tempRecord;
            
            if (singleRecord.displayedPanel.getNumTot() != 0) {
                output += singleRecord.displayedPanel.getNumTot() *
                        singleRecord.article.getPrice();
            }
        }
        return output;
    }

    /**
     * Committs the calculated price of the current partial order to the gui.
     */
    void updateCurrentOrder() {
        parent.updateCurrentOrder(computeCurrentOrder());
    }

    /**
     * Calculate price o the given Order
     *
     * @param ordine the order to calculate
     *
     * @return Price calculated.
     */
    private double computeOrderPrice(Order ordine) {
        List<EntrySingleArticle> lista = ordine.getArticlesSold();
        double output = 0;
        for (EntrySingleArticle singoloBene : lista) {
            output += singoloBene.numTot * singoloBene.article.getPrice();
        }
        return output;
    }

    /**
     * This cancells the last commited order. It's a function to treat carefully
     */
    void undoLastOrder() {
        final int result = javax.swing.JOptionPane.showConfirmDialog(this,
                "Vuoi veramente annullare l'ultimo ordine emesso?",
                "Annulla ultimo Ordine", javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.WARNING_MESSAGE);
        if (result == javax.swing.JOptionPane.YES_OPTION) {
            try {
                owner.delRMILastOrder();
                parent.cleanLastOrder();
                javax.swing.JOptionPane.showMessageDialog(this,
                    "L'ultimo Ordine emesso è stato annullato",
                    "Operazione terminata",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } catch (RemoteException ex) {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Il server non ha risposto alla richiesta di annullamento",
                    "Errore di comunicazione",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Il server ha avuto problemi col DB",
                    "Errore del Backend sul server",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
