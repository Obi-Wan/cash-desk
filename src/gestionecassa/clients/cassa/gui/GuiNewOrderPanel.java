/*
 * GuiNewOrderPanel.java
 * 
 * Copyright (C) 2009 Nicola Roberto Viganò
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GuiNewOrderPanel.java
 *
 * Created on 12-mag-2009, 22.16.39
 */

package gestionecassa.clients.cassa.gui;

import gestionecassa.clients.gui.VisualListsMngr;
import gestionecassa.clients.cassa.*;
import gestionecassa.ArticleWithOptions;
import gestionecassa.Article;
import gestionecassa.ArticleGroup;
import gestionecassa.ArticlesList;
import gestionecassa.clients.gui.GuiAppFrame.MessageType;
import gestionecassa.clients.gui.VariableVisualList;
import gestionecassa.exceptions.WrongArticlesListException;
import gestionecassa.order.EntryArticleGroup;
import gestionecassa.order.Order;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.rmi.RemoteException;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;

/**
 *
 * @author ben
 */
public final class GuiNewOrderPanel extends javax.swing.JPanel implements VariableVisualList {

    /**
     * Reference to the base client logic
     */
    CassaAPI baseClient;

    /**
     * Reference to the visual frame fo the client
     */
    GuiAppFrameCassa frame;

    /**
     * Local Reference to the articles list.
     */
    ArticlesList articlesList;

    /**
     * 
     */
    VisualListsMngr<GuiGroupPanel, ArticleGroup> varListMng;

    /** 
     * Creates new form GuiNewOrderPanel
     *
     * @param baseClient Reference to the client app
     * @param frame Reference to the frame containing this panel
     */
    public GuiNewOrderPanel(CassaAPI baseClient, GuiAppFrameCassa frame) {
        initComponents();
        this.baseClient = baseClient;
        this.frame = frame;
        this.articlesList = baseClient.getArticlesList();

        varListMng = new VisualListsMngr<GuiGroupPanel, ArticleGroup>(this);
        varListMng.setHasInitialGap(true);

        fillContentsList();
        rebuildVisualList();

        this.setPreferredSize(new Dimension(800, 450));

        this.getInputMap(WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "ENTER");
        this.getActionMap().put("ENTER", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                confirmAndSendNewOrder();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setMinimumSize(new java.awt.Dimension(150, 150));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 559, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 443, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables


    /**
     * Populates the list of the panels related to each article sold.
     */
    void fillContentsList() {
        this.varListMng.resetList();
        /* Visual Id of articles for shortcuts from keyboard */
        int i = 0;
        /* Every group will have its panel */
        for (ArticleGroup articleGroup : articlesList.getGroupsList()) {

            /* create and add to the manager the panel for this group */
            GuiGroupPanel grPanel = new GuiGroupPanel(this, articleGroup);
            this.varListMng.addRecord(grPanel, articleGroup);

            /* for every article in that group */
            for (Article article : articleGroup.getList()) {
                GuiAbstrSingleEntryPanel tempPanel;
                if (article instanceof ArticleWithOptions) {
                    tempPanel =
                            new GuiOrderSingleArticleWOptionsPanel(this,
                                                (ArticleWithOptions)article,i);
                } else {
                    tempPanel = new GuiOrderSingleArticlePanel(this, article, i);
                }
                grPanel.varListMngr.addRecord(tempPanel, article);
                i++;
            }

            /* let's create the internal list for this group panel */
            grPanel.varListMngr.buildVisualList();
        }
    }

    void cleanDataFields() {
        varListMng.cleanDataFields();
        frame.getStatusPanel().setPartialOrder(0);
    }

    @Override
    public void rebuildVisualList() {
        varListMng.buildVisualList();
        frame.refreshContentPanel();
    }

    /**
     * Refreshes the list from the server and then rebuilds visual lists
     */
    void refreshList() {
        try {
            /* it fetches the ArticleList from the server (through the CassaAPI)
             * and makes the client store it */
            baseClient.fetchRMIArticlesList();
        
            /* And now reference it locally */
            articlesList = baseClient.getArticlesList();

            fillContentsList();
            rebuildVisualList();
        } catch (RemoteException ex) {
            frame.showMessageDialog("Il server non ha risposto alla richiesta "
                + "della lista, che non sarà aggiornata.",
                MessageType.ErrorComunication);
        }
    }

    /**
     * Creates a new order from the chosen Articles
     * @return the created order
     * @throws RemoteException
     */
    private Order createNewOrder() throws RemoteException {
        // TODO One day will be needed here to handle the table properly
        Order tempOrd = new Order(baseClient.getUsername(), baseClient.getHostname(), 0,
                                    articlesList.getSignature());

        for (GuiGroupPanel group : varListMng.getPanels()) {
            EntryArticleGroup tempEntry = group.collectOrderEntries();
            if (tempEntry.numTot > 0) {
                tempOrd.addGroup(tempEntry);
            }
        }
        return tempOrd;
    }

    /**
     * It calculates the amount the "still to be committed" order will cost
     * @return count of this partial order
     */
    private double computeCurrentOrder() {
        double output = 0;
        for (GuiGroupPanel group : varListMng.getPanels()) {
            output += group.getPartialOrderPrice();
        }
        return output;
    }

    /**
     * Committs the calculated price of the current partial order to the gui.
     */
    void updateCurrentOrder() {
        frame.getStatusPanel().setPartialOrder(computeCurrentOrder());
    }

    /**
     * If the new order is not empty, it sends it to the server and cleans the
     * gui, ready for compiling a new order.
     */
    void confirmAndSendNewOrder() {
        try {
            Order nuovoOrdine = createNewOrder();

            if (nuovoOrdine.getTotalPrice() != 0) {
                baseClient.sendRMINewOrder(nuovoOrdine);
                frame.getStatusPanel().setEmittedOrder(nuovoOrdine.getTotalPrice());
                this.cleanDataFields();
            }
        } catch (WrongArticlesListException ex) {
            baseClient.getLogger().warn("The list of articles is outdated", ex);
            frame.showMessageDialog("La lista degli articoli non coincide con "
                    + "quella del server\nPer favore aggiornala",
                    MessageType.ErrorList);
        } catch (RemoteException ex) {
            frame.showMessageDialog("Il server non ha risposto alla richiesta "
                    + "dell'invio del nuovo ordine", MessageType.ErrorComunication);
        } catch (IOException ex) {
            frame.showMessageDialog("Il server ha avuto problemi col DB",
                    MessageType.ErrorServerBackend);
        }
    }

    /**
     * This cancells the last commited order. It's a function to treat carefully
     */
    void undoLastOrder() {
        final int result = frame.showConfirmDialog("Vuoi veramente annullare "
                + "l'ultimo ordine emesso?", "Annulla ultimo Ordine",
                MessageType.WarningGeneric);
        if (result == javax.swing.JOptionPane.YES_OPTION) {
            try {
                baseClient.delRMILastOrder();
                frame.getStatusPanel().cleanLastOrder();

                frame.showMessageDialog("L'ultimo Ordine emesso è stato "
                        + "annullato", MessageType.InformationTerminatedOp);
            } catch (RemoteException ex) {
                frame.showMessageDialog("Il server non ha risposto alla "
                    + "richiesta di annullamento", MessageType.ErrorComunication);
            } catch (IOException ex) {
                frame.showMessageDialog("Il server ha avuto problemi col DB",
                    MessageType.ErrorServerBackend);
            }
        }
    }
}
