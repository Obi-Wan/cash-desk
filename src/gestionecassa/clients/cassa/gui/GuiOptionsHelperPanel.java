/*
 * GuiOptionsHelperPanel.java
 * 
 * Copyright (C) 2009 Nicola Roberto Vigan√≤
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GuiOptionsHelperPanel.java
 *
 * Created on 4-set-2009, 18.46.14
 */

package gestionecassa.clients.cassa.gui;

import gestionecassa.clients.OkCancelPanelAPI;
import java.util.Vector;

/**
 *
 * @author ben
 */
public class GuiOptionsHelperPanel extends GuiVariableListPanel implements OkCancelPanelAPI {

    GuiOrderSingleArticleWOptionsPanel targetPanel;

    /** Creates new form GuiOptionsHelperPanel */
    public GuiOptionsHelperPanel(
            GuiOrderSingleArticleWOptionsPanel targetPanel) {
        initComponents();

        this.targetPanel = targetPanel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

    /**
     * Inner class that defines a record of the table of options.
     *
     * @author ben
     */
    protected class RecordPanelsOfOptions extends RecordPanels {

        /**
         * Reference to the option that this Record rapresents
         */
        final String option;

        /**
         * Reference to the original panel showing up in the gui,
         * rapresenting this option; if any.
         */
        final GuiOrderSingleOptionPanel originalPanel;

        /**
         * Explicit constructor
         *
         * @param article
         * @param panel
         */
        public RecordPanelsOfOptions(String option,
                GuiOrderSingleOptionPanel origPanel,
                GuiHelperSingleOptionPanel diagPanel) {
            super(diagPanel);
            this.option = option;
            this.originalPanel = origPanel;
        }
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables


    /**
     * Initializes the panel
     */
    public void init() {
        buildContentsList();
        buildVisualList();
    }

    /**
     * Popolates the list of the panels related to each article sold.
     */
    protected void buildContentsList() {
        panelsTable = new Vector<RecordPanels>();
        int i = 0;
        for (String option : targetPanel.article.getOptions()) {
            GuiHelperSingleOptionPanel tempDiagPanel;
            GuiOrderSingleOptionPanel tempOrigPanel = targetPanel.getSingleOptionPanel(option);

            tempDiagPanel = new GuiHelperSingleOptionPanel(this, option,
                    (tempOrigPanel == null) ? 0 : tempOrigPanel.getNumParziale(),
                    i
                        );

            panelsTable.add(new RecordPanelsOfOptions(option, tempOrigPanel, tempDiagPanel));
            i++;
        }
    }

    /**
     * Applies modifications to the original panel.
     */
    public void apply() {
        for (RecordPanels tempRecord : panelsTable) {
            RecordPanelsOfOptions record =
                    (RecordPanelsOfOptions) tempRecord;

            GuiHelperSingleOptionPanel dispPanel =
                    (GuiHelperSingleOptionPanel) tempRecord.displayedPanel;

            if (dispPanel.spinnerModel.getValue().equals(
                    dispPanel.spinnerModel.getMinimum())) {
                if (record.originalPanel != null) {
                    targetPanel.removeOptionPanel(record.originalPanel);
                }
            } else {
                if (record.originalPanel == null) {
                    targetPanel.addNewOptionPanel(record.option,
                            dispPanel.getNumTot());
                } else {
                    record.originalPanel.spinnerModel.setValue(
                            dispPanel.spinnerModel.getValue());
                }
            }
        }
        targetPanel.updateAfterModify();
    }
}
