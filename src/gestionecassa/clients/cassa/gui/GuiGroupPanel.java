/*
 * GuiGroupPanel.java
 * 
 * Copyright (C) 2009 Nicola Roberto Vigan√≤
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GuiGroupPanel.java
 *
 * Created on 18-set-2009, 14.37.11
 */

package gestionecassa.clients.cassa.gui;

import gestionecassa.Article;
import gestionecassa.ArticleGroup;
import gestionecassa.ArticleWithOptions;
import gestionecassa.clients.gui.RecordPanels;
import gestionecassa.clients.gui.VariableVisualList;
import gestionecassa.clients.gui.VisualListsMngr;
import gestionecassa.order.EntryArticleGroup;
import java.rmi.RemoteException;

/**
 * This panel is the visual rapresentation of a <code>ArticleGroup</code>.
 * It manages the panels that rapresent the <code>Article</code>s contained
 * in that group: displayes them, and asks them for their proprieties.
 *
 * @author ben
 */
public class GuiGroupPanel extends GuiAbstrSingleEntryPanel implements VariableVisualList {

    /**
     * Reference to the group rapresented
     */
    ArticleGroup group;

    /**
     * Reference to the panel that owns this one.
     */
    GuiNewOrderPanel orderPanel;

    /**
     * Variable list of panels owned by this class. Those panels do rapresent
     * in turn the articles contained in the group rapresented by this panel.
     */
    VisualListsMngr<GuiAbstrSingleEntryPanel, Article> varListMngr;

    /** Creates new form GuiGroupPanel
     * 
     * @param orderPanel Reference to the panel owning this one.
     * @param group Reference to the <code>ArticleGroup</code> rapresented
     */
    public GuiGroupPanel(GuiNewOrderPanel orderPanel, ArticleGroup group) {
        initComponents();
        this.orderPanel = orderPanel;
        this.group = group;

        this.setBorder(
                javax.swing.BorderFactory.createTitledBorder(group.getName()));

        varListMngr = new VisualListsMngr<GuiAbstrSingleEntryPanel, Article>(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("")));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 382, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 282, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

    /**
     * In this implementation it just tells how many things will ahve to prepare
     * the manager of this group
     * 
     * @return An int containing the number of Articles selected in this group
     */
    @Override
    public int getNumTot() {
        int num = 0;
        for (GuiAbstrSingleEntryPanel panel : varListMngr.getPanels()) {
            num += panel.getNumTot();
        }
        return num;
    }

    /**
     * Cleans the data fields of owned panels
     */
    @Override
    public void clean() {
        varListMngr.cleanDataFields();
    }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables

    /**
     * Creates a new order from the chosen Articles
     * @return the created group part of the order
     * @throws RemoteException
     */
    public EntryArticleGroup collectOrderEntries() throws RemoteException {
        EntryArticleGroup entry = new EntryArticleGroup(group);
        for (RecordPanels<GuiAbstrSingleEntryPanel, Article>
                record : varListMngr.getRecords()) {
            int tempNumTot = record.displayedPanel.getNumTot();

            if (tempNumTot > 0) {
                if (record.data.hasOptions()) {

                    int progressive = orderPanel.baseClient.getNProgressivo(
                            record.data.getName(), tempNumTot);
                    entry.addArticleWithOptions(
                            (ArticleWithOptions)record.data,
                            tempNumTot, progressive,
                            ((GuiOrderSingleArticleWOptionsPanel)
                                (record.displayedPanel)).getPatialsList());
                } else {

                    entry.addArticle(record.data, tempNumTot);
                }
            }
        }
        return entry;
    }

    /**
     * It calculates the amount the "still to be committed" order will cost
     *
     * @return A double rapresenting the sub total price of the article in this group
     */
    double getPartialOrderPrice() {
        double output = 0;
        for (RecordPanels<GuiAbstrSingleEntryPanel, Article>
                tempRecord : varListMngr.getRecords()) {

            if (tempRecord.displayedPanel.getNumTot() != 0) {
                output += tempRecord.displayedPanel.getNumTot() *
                        tempRecord.data.getPrice();
            }
        }
        return output;
    }

    /**
     * Refreshes the visual variable list of panels.
     */
    @Override
    public void rebuildVisualList() {
        varListMngr.buildVisualList();
    }
}
