/*
 * GuiAppFrameAdministration.java
 * 
 * Copyright (C) 2009 Nicola Roberto Vigan√≤
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GuiAppFrameAdministration.java
 *
 * Created on 21-mag-2009, 19.59.58
 */

package gestionecassa.clients.administration.gui;

import gestionecassa.clients.administration.AdminPrefs;
import gestionecassa.clients.gui.GuiAppFrame;
import gestionecassa.clients.gui.GuiHelper;
import gestionecassa.clients.gui.GuiOkCancelDialog;
import gestionecassa.clients.gui.GuiPreferencesPanel;
import gestionecassa.clients.administration.AdministrationAPI;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;

/**
 *
 * @author ben
 */
public class GuiAppFrameAdministration extends GuiAppFrame<AdministrationAPI> {

    /**
     * Reference to the status pannel for the Admin client
     */
    GuiStatusAdministrationPanel statusPanel;

    /**
     * Main container for admin client action: in this tabbed pane will be
     * opened tabs about work done on the data.
     */
    JTabbedPane mainTabbedPanel;

    /**
     * Creates new form GuiAppFrameAdministration
     * @param baseClient reference to the client implementation
     */
    public GuiAppFrameAdministration(AdministrationAPI baseClient) {
        super(baseClient);
        initComponents();

        statusPanel = new GuiStatusAdministrationPanel(this);
        mainTabbedPanel = new JTabbedPane();

        GuiHelper.MngBorderLayout.init(getContentPane());
        GuiHelper.MngBorderLayout.putTop(getContentPane(), toolbar);
        GuiHelper.MngBorderLayout.putCenter(getContentPane(), jScrollPanelMain);
        GuiHelper.MngBorderLayout.putRight(getContentPane(), statusPanel);

        enableLogout(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables

    /**
     * Opens a dialog for setting the options
     */
    @Override
    public void selectedDialogOptions() {
        new GuiOkCancelDialog(this, "Client Options",
                  new GuiPreferencesPanel<AdminPrefs>(baseClient)).setVisible(true);
    }

    /**
     * Sets up the gui after a successful login
     * @param username String containing the username of the logged user
     */
    @Override
    public void setupAfterLogin(String username) {
        super.setupAfterLogin(username);
        statusPanel.enableButtons(true);
        jScrollPanelMain.setViewportView(mainTabbedPanel);
    }

    /**
     * Creates a new tab for the chioce of new content tabs
     */
    void openTabelsViewChioce() {
        mainTabbedPanel.add("Open..", new GuiOpenTablePanel(this));
    }

    /**
     * Substitutes the old tab with new tabs give in the second argument
     * @param previous The tab to remove
     * @param newOnes Set of new tabs with titles
     */
    void substituteTabeWithOther(JPanel previous, Map<String,JPanel> newOnes) {
        mainTabbedPanel.remove(previous);
        for (String title : newOnes.keySet()) {
            mainTabbedPanel.add(title, newOnes.get(title));
        }
    }
}
